## Check that outcome is valid
# then outcome
condName = gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", outcome, perl=TRUE)
if (grepl(" ", outcome)){ # if outcome is more than 1 word
condName = gsub("(\\s)", "\\.", condName, perl=TRUE)
}
colName = paste("Hospital.30.Day.Death..Mortality..Rates.from", condName, sep = ".")
if (sum(names(d)==colName)!=1){
stop("invalid outcome")
return
}
colName
stateName = unique(d$State)
stateName = stateName[order(stateName)]
out = matrix(NA,nrow=length(stateName), ncol=2)
source("../../Rcode/rankhospital.R")
rankhospital("WI", "pneumonia", "worst")
rankhospital("WV", "pneumonia", "worst")
rankhospital("WY", "pneumonia", "worst")
state = "WY"
thisStateData = d[d$State==state,]
ordered = thisStateData[order(as.numeric(thisStateData[,colName]), thisStateData$Hospital.Name),]
worst = which(as.numeric(ordered[,colName])==max(as.numeric(ordered[,colName]), na.rm=TRUE))
worst
View(thisStateData)
View(ordered)
thisCell=ordered$Hospital.Name[num]
thisCell
if (is.numeric(num) && num > worst){
thisCell=NA
} else{
if (num=="best"){
num=1
} else if (num=="worst"){
num = worst
}
thisCell=ordered$Hospital.Name[num]
}
thisCell
rm(list=ls())
source("../../Rcode/rankall.R")
tail(rankall("pneumonia", "worst"), 3)
data = rankall("pneumonia", "worst")
View(data)
source("../../Rcode/rankhospital.R")
?rankhospital
rankhospital
rankhospital("VI", "pneumonia", num = "worst")
rankhospital("WY", "pneumonia", num = "worst")
rm(list=ls())
source("../../Rcode/rankall.R")
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rm(list=ls())
source("../../Rcode/rankall.R")
tail(rankall("pneumonia", "worst"), 3)
rm(list=ls())
source("../../Rcode/rankall.R")
tail(rankall("pneumonia", "worst"), 3)
outcome="pneumonia"
num="worst"
targetDir = c("/Users/akiko/Documents/R/JHU_dataScience/Rprogramming/week4assignment/rprog-data-ProgAssignment3-data")
setwd(targetDir)
d <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
# then outcome
condName = gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", outcome, perl=TRUE)
if (grepl(" ", outcome)){ # if outcome is more than 1 word
condName = gsub("(\\s)", "\\.", condName, perl=TRUE)
}
colName = paste("Hospital.30.Day.Death..Mortality..Rates.from", condName, sep = ".")
if (sum(names(d)==colName)!=1){
stop("invalid outcome")
return
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
stateName = unique(d$State)
stateName = stateName[order(stateName)]
out = matrix(NA,nrow=length(stateName), ncol=2)
length(stateName)
i=52
state=stateName[i]
state
thisStateData = d[d$State==state,]
ordered = thisStateData[order(as.numeric(thisStateData[,colName]), thisStateData$Hospital.Name),]
View(ordered)
worst = which(as.numeric(ordered[,colName])==max(as.numeric(ordered[,colName]), na.rm=TRUE))
worst
is.numeric(num) && num > worst
num=="best"
num=="worst"
num = worst
num
thisCell=ordered$Hospital.Name[num]
thisCell
out[i,1] = thisCell
out[i,2] = state
out
i
i=53
state=stateName[i]
state
thisStateData = d[d$State==state,]
ordered = thisStateData[order(as.numeric(thisStateData[,colName]), thisStateData$Hospital.Name),]
worst = which(as.numeric(ordered[,colName])==max(as.numeric(ordered[,colName]), na.rm=TRUE))
View(ordered)
worst
if (is.numeric(num) && num > worst){
thisCell=NA
} else {
if (num=="best"){
num=1
} else if (num=="worst"){
num = worst
}
thisCell=ordered$Hospital.Name[num]
}
num
worst
(num=="worst")
rm(list=ls())
source("../../Rcode/rankall.R")
tail(rankall("pneumonia", "worst"), 3)
rm(list=ls())
source("../../Rcode/rankall.R")
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "best"), 3)
tail(rankall("heart failure"), 10)
head(rankall("heart attack", 20), 10)
rm(list=ls())
source("../../Rcode/rankall.R")
head(rankall("heart attack", 20), 10)
rm(list=ls())
source("../../Rcode/rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
outcome="pneumonia"
num = "worst"
targetDir = c("/Users/akiko/Documents/R/JHU_dataScience/Rprogramming/week4assignment/rprog-data-ProgAssignment3-data")
setwd(targetDir)
d <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
# then outcome
condName = gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", outcome, perl=TRUE)
if (grepl(" ", outcome)){ # if outcome is more than 1 word
condName = gsub("(\\s)", "\\.", condName, perl=TRUE)
}
colName = paste("Hospital.30.Day.Death..Mortality..Rates.from", condName, sep = ".")
if (sum(names(d)==colName)!=1){
stop("invalid outcome")
return
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
stateName = unique(d$State)
stateName = stateName[order(stateName)]
out = matrix(NA,nrow=length(stateName), ncol=2)
i=52
state=stateName[i]
state
num
thisStateData = d[d$State==state,]
ordered = thisStateData[order(as.numeric(thisStateData[,colName]), thisStateData$Hospital.Name),]
worst = which(as.numeric(ordered[,colName])==max(as.numeric(ordered[,colName]), na.rm=TRUE))
worst
if (is.numeric(num) && num > worst){
thisCell=NA
} else if (is.numeric(num) && num <= worst){
thisCell=ordered$Hospital.Name[num]
} else {
if (num=="best"){
thisCell=ordered$Hospital.Name[1]
} else if (num=="worst"){
thisCell=ordered$Hospital.Name[worst]
}
}
thisCell
num
out[i,1] = thisCell
out[i,2] = state
rm(thisCell, state)
out
i
i=53
state=stateName[i]
state
thisStateData = d[d$State==state,]
ordered = thisStateData[order(as.numeric(thisStateData[,colName]), thisStateData$Hospital.Name),]
worst = which(as.numeric(ordered[,colName])==max(as.numeric(ordered[,colName]), na.rm=TRUE))
worst
if (is.numeric(num) && num > worst){      thisCell=NA    } else if (is.numeric(num) && num <= worst){      thisCell=ordered$Hospital.Name[num]    } else {        if (num=="best"){        thisCell=ordered$Hospital.Name[1]         } else if (num=="worst"){        thisCell=ordered$Hospital.Name[worst]       }    }
ordered$Hospital.Name[worst]
if (is.numeric(num) && num > worst){
thisCell=NA
} else if (is.numeric(num) && num <= worst){
thisCell=ordered$Hospital.Name[num]
} else {
if (num=="best"){
thisCell=ordered$Hospital.Name[1]
} else if (num=="worst"){
thisCell=ordered$Hospital.Name[worst]
}
}
thisCell
worst
num
out[i,1] = thisCell
out[i,2] = state
rm(thisCell, state)
out
i
i=54
state=stateName[i]
state
thisStateData = d[d$State==state,]
ordered = thisStateData[order(as.numeric(thisStateData[,colName]), thisStateData$Hospital.Name),]
worst = which(as.numeric(ordered[,colName])==max(as.numeric(ordered[,colName]), na.rm=TRUE))
if (is.numeric(num) && num > worst){
thisCell=NA
} else if (is.numeric(num) && num <= worst){
thisCell=ordered$Hospital.Name[num]
} else {
if (num=="best"){
thisCell=ordered$Hospital.Name[1]
} else if (num=="worst"){
thisCell=ordered$Hospital.Name[worst]
}
}
num
worst
thisCell
out[i,1] = thisCell
out[i,2] = state
rm(thisCell, state)
}
rm(list=ls())
list.files()
source("../../Rcode/rankall.R")
tail(rankall("pneumonia", "worst"), 3)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "best"), 3)
head(rankall("heart attack", 3), 10)
last()
lst
last
rm(list=ls())
source("../../Rcode/rankall.R")
tail(rankall("pneumonia", "worst"), 3)
head(rankall("heart attack", 20), 10)
?fprintf
print
?print
print("hello")
i=2
print(i)
rm(list=ls())
source("../../Rcode/rankall.R")
tail(rankall("pneumonia", "worst"), 3)
outcome="pneumonia"
num = "worst"
targetDir = c("/Users/akiko/Documents/R/JHU_dataScience/Rprogramming/week4assignment/rprog-data-ProgAssignment3-data")
setwd(targetDir)
d <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
condName = gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", outcome, perl=TRUE)
if (grepl(" ", outcome)){ # if outcome is more than 1 word
condName = gsub("(\\s)", "\\.", condName, perl=TRUE)
}
colName = paste("Hospital.30.Day.Death..Mortality..Rates.from", condName, sep = ".")
if (sum(names(d)==colName)!=1){
stop("invalid outcome")
return
stateName = unique(d$State)
stateName = stateName[order(stateName)]
out = matrix(NA,nrow=length(stateName), ncol=2)
if (sum(names(d)==colName)!=1){
stop("invalid outcome")
return
}
stateName = unique(d$State)
stateName = stateName[order(stateName)]
out = matrix(NA,nrow=length(stateName), ncol=2)
stateName
i=35
print(i)
state=stateName[i]
thisStateData = d[d$State==state,]
ordered = thisStateData[order(as.numeric(thisStateData[,colName]), thisStateData$Hospital.Name),]
View(ordered)
last = which(as.numeric(ordered[,colName])==max(as.numeric(ordered[,colName]), na.rm=TRUE))
last
max(which(as.numeric(ordered[,colName])==max(as.numeric(ordered[,colName]), na.rm=TRUE)))
rm(list=ls())
source("../../Rcode/rankall.R")
tail(rankall("pneumonia", "worst"), 3)
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"), 10)
rm(list=ls())
setwd("../../Rcode/")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
setwd("../../Rcode/")
submit()
setwd("../../Rcode/")
submit()
ls()
rm(list=ls())
setwd("~/Documents/R/StanfordOnline_Jan2014/ProblemSet/StatLearningChapter4/")
list.files()
library(ISLR)
Auto$mpg01=rep(0,times=dim(Auto)[1])
Auto$mpg01[Auto$mpg>median(Auto$mpg)]=1
Auto$mpg01=factor(Auto$mpg01)
train=sample(c(1:dim(Auto)[1]),dim(Auto)[1]/2) # assign half the dataset to training
trainData = Auto[train,]
testData = Auto[-train,]
ls()
View(testData)
View(trainData)
train
attach(Auto)
train.X = cbind(displacement[train],horsepower[train],weight[train],acceleration[train])
test.X = cbind(displacement[-train],horsepower[-train],weight[-train],acceleration[-train])
train.X
test.X
knn.pred=knn(train.X, test.X, trainData$mpg01,k=1)
require(knn)
require(knnfflex)
library(class)
?knn
knn.pred=knn(train.X, test.X, trainData$mpg01,k=1)
table(knn.pred, Direction.test)
knn.pred
table(knn.pred, testData$mpg01)
mean(knn.pred==Direction.test)
mean(knn.pred==testData$mpg01)
kRange = 1:10
meanAcc = matrix(0,nrow=1,ncol=length(kRange))
kRange = 1:10
meanAcc = matrix(0,nrow=1,ncol=length(kRange))
for (i in 1:length(kRange)){
knn.pred=knn(train.X, test.X, trainData$mpg01,k=kRange[i])
meanAcc[i]=mean(knn.pred==testData$mpg01)
}
meanAcc
kRange = 1:15
meanAcc = matrix(0,nrow=1,ncol=length(kRange))
for (i in 1:length(kRange)){
knn.pred=knn(train.X, test.X, trainData$mpg01,k=kRange[i])
meanAcc[i]=mean(knn.pred==testData$mpg01)
}
meanAcc
1-meanAcc
ls()
rm(list=ls())
power = function(){
2^3
}
power
power()
ls()
str(environment)
environment()
Power2 =function (x,a){
x^a
}
Power2(3,8)
Power2(10,3)
Power2(8,17)
Power2(131,3)
ls()
Power3 =function (x,a){
result=x^a
return(result)
}
Power3(3,2)
return(result)
Power3 =function (x,a){
result=x^a
#return(result)
}
Power3(3,2)
return(result)
Power3 =function (x,a){
result=x^a
return(result)
}
Power3(3,2)
ls()
rm(Power3)
Power3 =function (x,a){
result=x^a
return(result)
}
Power3(3,2)
results
result
?return
result = Power3(3,2)
result
result = Power2(3,2)
results
result
result = Power3(3,2)
result
result2 = Power2(3,2)
result2
rm(result, result2)
Power3 =function (x,a){
result=x^a
return(result)
}
Power3(4,2)
result Power3(4,2)
result = Power3(4,2)
result
Power2 =function (x,a){
x^a
}
result2=Power2(3,2)
result2
Power3 =function (x,a){
result=x^a
return(result)
x+a
}
Power3(3,2)
Power2 =function (x,a){
x^a
x+a
}
Power2(3,2)
Power3 =function (x,a){
result=x^a
return(result)
x+a # this will not be returned, since I specified that result would be returned instead
}
Power3(4,2)
x = 1:10
y=apply(x,Power3(x,2))
x
dim(x)
x = 1:10
y=apply(x,2,Power3(x,2))
?apply
y=apply(x,2,function(x,a) Power(x,a))
y=apply(x,1,function(x,a) Power(x,a))
y=apply(x,1,function(x,a) Power3(x,a))
ls()
power()
Power2
rm(result, result2)
apply(x,1,mean)
apply(x,2,mean)
?lapply
y=lapply(x,Power3(x,2))
y=lapply(x,Power3,a=2)
y
y=lapply(x,Power3,a=2,simplify=TRUE)
rm(y)
y=lapply(x,Power3,a=2,simplify=TRUE)
y
y=sapply(x,Power3,a=2)
y
x = 1:10
y=sapply(x,Power3,a=2)
plot(x,y)
?plot
plot(x,y,main="power of 2",xlab="x",ylab="log of x^2",log="y")
plot(x,log(y),main="power of 2",xlab="x",ylab="log of x^2",log="y")
PlotPower = function(x,a){
y=sapply(x,Power3(x,a))
plot(x,log(y),main="power of 2",xlab="x",ylab="log of x^2",log="y")
}
PlotPower(x,2)
a
x
rm(y)
x
PlotPower(x,2)
PlotPower = function(x,a){
y=sapply(x,Power3)
plot(x,log(y),main="power of 2",xlab="x",ylab="log of x^2",log="y")
}
PlotPower(x,2)
x
a
?sapply
PlotPower = function(x,a){
y=sapply(x,Power3,a)
plot(x,log(y),main="power of 2",xlab="x",ylab="log of x^2",log="y")
}
PlotPower(x,2)
PlotPower = function(x,a){
y=sapply(x,Power3,a)
plot(x,log(y),main="log(power of 2)",xlab="x",ylab="log of x^2",log="y")
}
PlotPower(x,2)
PlotPower = function(x,a){
y=sapply(x,Power3,a)
plot(x,log(y),main="log(x to the 2nd)",xlab="x",ylab="log of x^2",log="y")
}
PlotPower(x,2)
rm(list=ls())
library(ISLR)
?Boston
ls()
library(Boston)
library(MASS)
?Boston
